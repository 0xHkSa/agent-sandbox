#!/bin/bash
# Hawaii Agent Control Script
# Run this from your local terminal (outside container)

set -e

# Auto-detect container name or use default
CONTAINER_NAME="${CONTAINER_NAME:-}"
PROJECT_PATH="/workspaces/agent-sandbox"

# If no container name set, try to auto-detect
if [ -z "$CONTAINER_NAME" ]; then
    # Try to find container with this project path mounted
    CONTAINER_NAME=$(docker ps --filter "volume=/workspaces/agent-sandbox" --format "{{.Names}}" 2>/dev/null | head -1)
    
    # If still not found, try to find any container with /workspaces mount
    if [ -z "$CONTAINER_NAME" ]; then
        CONTAINER_NAME=$(docker ps --format "{{.Names}}" | grep -E "vsc|devcontainer" | head -1 2>/dev/null)
    fi
fi

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}üå∫ Hawaii Agent Control${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

check_container() {
    if [ -z "$CONTAINER_NAME" ]; then
        echo -e "${RED}‚ùå Could not find your dev container${NC}"
        echo -e "${YELLOW}üí° Set the container name manually:${NC}"
        echo -e "   ${BLUE}export CONTAINER_NAME=your-container-name${NC}"
        echo -e "   ${BLUE}./hawaii start${NC}"
        echo ""
        echo -e "${YELLOW}üí° Or find your container name with:${NC}"
        echo -e "   ${BLUE}docker ps${NC}"
        echo ""
        echo -e "${YELLOW}üí° Running containers:${NC}"
        docker ps --format "   {{.Names}}" 2>/dev/null || echo "   Cannot access Docker"
        exit 1
    fi
    
    if ! docker ps | grep -q "$CONTAINER_NAME"; then
        echo -e "${RED}‚ùå Container '$CONTAINER_NAME' is not running${NC}"
        echo -e "${YELLOW}üí° Start your container first or use 'docker-compose up -d'${NC}"
        exit 1
    fi
}

cmd_start() {
    print_header
    echo -e "${GREEN}üöÄ Starting all services...${NC}"
    check_container
    docker exec -d "$CONTAINER_NAME" bash -c "cd $PROJECT_PATH && pnpm start:all"
    echo -e "${BLUE}‚è≥ Waiting for services to start...${NC}"
    sleep 6
    cmd_status
}

cmd_stop() {
    print_header
    echo -e "${YELLOW}üõë Stopping all services...${NC}"
    check_container
    docker exec "$CONTAINER_NAME" bash -c "cd $PROJECT_PATH && pnpm stop:all"
}

cmd_restart() {
    cmd_stop
    sleep 2
    cmd_start
}

cmd_status() {
    print_header
    echo -e "${BLUE}üìä Service Status:${NC}"
    echo ""
    
    check_container
    
    # MCP Server - check process inside container
    if docker exec "$CONTAINER_NAME" bash -c "ps aux | grep -q '[s]rc/mcp/server.mcp.ts'" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ MCP Server (4100)${NC} - Running"
    else
        echo -e "${RED}‚ùå MCP Server (4100)${NC} - Not running"
    fi
    
    # Backend API - check process inside container
    if docker exec "$CONTAINER_NAME" bash -c "ps aux | grep -q '[s]rc/server.ts'" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Backend API (4000)${NC} - Running"
    else
        echo -e "${RED}‚ùå Backend API (4000)${NC} - Not running"
    fi
    
    # Frontend - check process inside container
    if docker exec "$CONTAINER_NAME" bash -c "ps aux | grep -q '[n]ext-server'" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Frontend (3000)${NC} - Running"
    else
        echo -e "${RED}‚ùå Frontend (3000)${NC} - Not running"
    fi
    
    echo ""
}

cmd_logs() {
    print_header
    echo -e "${BLUE}üìã Viewing logs (Ctrl+C to stop)...${NC}"
    check_container
    docker exec -it "$CONTAINER_NAME" bash -c "tail -f /tmp/mcp-server.log /tmp/backend-server.log /tmp/frontend.log 2>/dev/null || echo 'No logs found'"
}

cmd_shell() {
    print_header
    echo -e "${BLUE}üêö Opening shell in container...${NC}"
    check_container
    docker exec -it "$CONTAINER_NAME" bash
}

cmd_compose() {
    print_header
    echo -e "${GREEN}üê≥ Starting with Docker Compose...${NC}"
    docker-compose up -d
    sleep 5
    cmd_status
}

cmd_compose_stop() {
    print_header
    echo -e "${YELLOW}üê≥ Stopping Docker Compose...${NC}"
    docker-compose down
}

cmd_help() {
    print_header
    echo ""
    echo "Usage: ./hawaii [command]"
    echo ""
    echo "Commands:"
    echo "  start         Start all services in the container"
    echo "  stop          Stop all services"
    echo "  restart       Restart all services"
    echo "  status        Check service status"
    echo "  logs          View logs"
    echo "  shell         Open a shell in the container"
    echo "  compose       Start using docker-compose"
    echo "  compose-stop  Stop docker-compose services"
    echo "  help          Show this help message"
    echo ""
    echo "Examples:"
    echo "  ./hawaii start      # Start all services"
    echo "  ./hawaii status     # Check if services are running"
    echo "  ./hawaii logs       # View real-time logs"
    echo ""
}

# Main command router
case "$1" in
    start)
        cmd_start
        ;;
    stop)
        cmd_stop
        ;;
    restart)
        cmd_restart
        ;;
    status)
        cmd_status
        ;;
    logs)
        cmd_logs
        ;;
    shell)
        cmd_shell
        ;;
    compose)
        cmd_compose
        ;;
    compose-stop)
        cmd_compose_stop
        ;;
    help|"")
        cmd_help
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        cmd_help
        exit 1
        ;;
esac

